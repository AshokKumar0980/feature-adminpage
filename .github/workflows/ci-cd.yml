name: MARS API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Make mvnw executable
      run: chmod +x ./mvnw
        
    - name: Run tests
      run: ./mvnw clean test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Make mvnw executable
      run: chmod +x ./mvnw
        
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: mars-api-jar
        path: target/*.jar

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download JAR
      uses: actions/download-artifact@v4
      with:
        name: mars-api-jar
        path: target/
        
    - name: Deploy to staging/production
      run: |
        echo "üöÄ Deploying JAR file to target environment"
        # Add your deployment commands here
        # Examples:
        # - Copy JAR to server via SCP
        # - Deploy to cloud platform (AWS, Azure, GCP)
        # - Use deployment tools like Ansible
        ls -la target/

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.deploy.result == 'success' }}
      run: |
        echo "‚úÖ Build and deployment successful for ${{ github.ref_name }}"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.deploy.result == 'failure' }}
      run: |
        echo "‚ùå Build or deployment failed for ${{ github.ref_name }}"